ПРАВИЛА
~~~~~~~

Прежде всего, ознакомьтесь, пожалуйста, с нашими правилами и системой
компиляции и сборки Far'а.


Предложение исправлений
~~~~~~~~~~~~~~~~~~~~~~~
При внесении изменений в исходный код, пожалуйста, следуйте следующим правилам:

1. Каждое изменение должно быть логически завершенным и, по возможности,
   минимальным. Это позволит нам быстрее его проверить и внести в исходный код.
2. Придерживайтесь единообразного стиля оформления кода.
3. Детально опишите, что и зачем ваш код исправляет.
4. Если ваше исправление требует обновления документации (справки,
   Энциклопедии и т.п.), не забудьте и ее обновить.
5. Исправления принимаются в виде diff-файлов. Наилучшим, а также самым простым
   методом создания патча является:
   svn diff > file.diff
   Пожалуйста, формируйте diff-файлы на основе последних версий исходного кода.
6. Все исправления следует отправлять на наш баг трекер:
   http://bugs.farmanager.com
7. Если Вы планируете вносить большие исправления или просто желаете находиться
   в курсе последних событий в разработке Far'а, подпишитесь на нашу рассылку:
   http://groups.google.com/group/fardev (fardev@googlegroups.com).
   Форум о разработке:
   http://forum.farmanager.com/viewforum.php?f=54
8. Если Вы будете присылать нам исправления часто и хорошего качества,
   Вам будет предоставлен полный доступ к репозиторию, на наше усмотрение.


Сборка
~~~~~~
1. Для сборки в Visual Studio можно использовать проект для IDE или makefile.
   Пример для msbuild & vcxproj:
     msbuild /property:Configuration=Release;platform=x64 far.vcxproj

   Пример для nmake & makefile:
     nmake /f makefile_vc

2. Для сборки в GCC можно использовать makefile.
   Пример для MinGW & makefile:
     mingw32-make -f makefile_gcc

Также см. комментарии в makefile_* для дополнительных параметров сборки.

Описание изменений - файл "changelog"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Все комментарии по внесенным изменениям пишутся в файл "changelog".
   В исходном коде имеет смысл оставлять комментарии только если участок
   может быть непонятен для "будущих поколений".
2. Изменения добавляются в начало файла.
3. Каждая запись начинается с шапки вида:
   warp 05.12.2006 01:39:38 +0300 - build 2149
4. Изменениям может не присваиваться билд, например, была косметика или
   изменения не в коде.
5. Пример макроса для создания шапки:
Macro {
  area="Editor"; key="Ctrl`"; action = function()
Keys("CtrlHome End CtrlLeft")
build=mf.int(mf.substr(Editor.Value,Editor.RealPos-1))+1;
Keys("CtrlHome")
print(mf.date("name %d.%m0.%Y %H:%M:%S %z - build ")) print(build)
for RCounter=4,1,-1 do  Keys("Enter") end
Keys("Up Up 1 . Space")
  end;
}

farversion.m4
~~~~~~~~~~~~~
1. Этот файл содержит информацию для генерирования версии Far:
   a. BUILDTYPE, строка, определяющая тип сборки:
      - `'      - пустая строка (релиз)
      - `alpha' - альфа версия
      - `beta'  - бета версия
      - `RC'    - релиз кандидат
      - `ЧтоЛибоДругое' - предназначено для выпуска версий Far, код которых
        ещё не вошел в репозиторий, чтоб не путать людей и нас.
        Вывод версии Far будет выглядеть следующим образом:
        Версия alpha ЧтоЛибоДругое based on build НомерБилда
   b. MAJOR - мажорная версия Far (например 3).
   c. MINOR - минорная версия Far (например 0).


vbuild.m4
~~~~~~~~~
1. Если в файле "vbuild.m4" был изменен номер билда, то после коммита
   изменений в репозиторий необходимо запустить "svn_tag_build.bat".


Добавление новых строк в языковые файлы
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Lng-файлы ренерируются автоматически.
   Добавлять изменения надо в farlang.templ.m4
   Если вы не знаете, как перевести новые строки на какой-либо язык,
   используйте английский вариант с префиксом "upd:".


x64 - обеспечение "удачной" работы под x86 и x64
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. DWORD_PTR, LONG_PTR, etc. применяется вместо DWORD/long/etc. в следующих
   случаях:

   a) нужны там где раньше были int/long/dword/или_любой_не_поинтер_тип_даных
      и в него пихали поинтер
   b) ...
   c) ...


REMINDER
~~~~~~~~
В файле "REMINDER" необходимо заносить сведения, на которые стоит обратить
внимание (или после некоторых действий "вернуться" к некоторому начальному
состоянию).


Macro. Добавление макрофункций (Draft)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Чтобы добавить новую макрофункцию необходимо:
1. Добавить в macroopcode.hpp константу MCODE_F_XXX
   Добавлять необходимо в конец KEY_MACRO_F_BASE блока.
2. Добавить в syslog.cpp (функция __MCODE_ToName, массив MCODE) строку
    DEF_MCODE_(F_XXX),
   (в дебажной версии функция __MCODE_ToName корректно отобразит значение OP-кода)
3. В macro.cpp:
   3.1 добавить описание функции (см. замечание ниже)
       static bool xxxFunc(const TMacroFunction*);
   3.2 добавляем в массив intMacroFunction описание функции (массив должен быть отсортирован)
   3.3 добавляем тело функции

   Замечание:
      Отдельная функция добавляется только в том случае, если математика не взаимодействует
      с классом KeyMacro. Если необходим доступ к внутренностям класса KeyMacro, то функционал
      кодим в KeyMacro::GetKey() (пример см MCODE_F_HISTIORY_ENABLE). При этом в массиве intMacroFunction
      в качестве функции указываем usersFunc.

Параметры помещаются в стек слева направо (в вершине стека самый последний параметр).
Для необязательных параметров компилятор помещает в стек 0. Такие параметры имеют тип vtUnknown.

У объектов, основанных на классе ScreenObject, имеется виртуальный метод VMProcess.
С его помощью можно "добраться" до приватных свойств и методов объекта.
Пример, см. MCODE_F_BM_XXX
